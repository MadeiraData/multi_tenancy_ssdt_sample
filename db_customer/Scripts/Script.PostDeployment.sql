/*
Post-Deployment Script Template
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.
 Use SQLCMD syntax to include a file in the post-deployment script.
 Example:      :r .\myfile.sql
 Use SQLCMD syntax to reference a variable in the post-deployment script.
 Example:      :setvar TableName MyTable
               SELECT * FROM [$(TableName)]
--------------------------------------------------------------------------------------
*/
GO
SET NOCOUNT ON;

-- Update or Create global params
MERGE INTO dbo.tblGlobalParams AS Target 
USING (VALUES 
   (N'DBVersion', '1.0.1.0', NULL, N'DB Version')
) 
AS Source (ParamName, ParamValueString, ParamValueInt, ParamDescription) 
ON Target.ParamName = Source.ParamName  
WHEN NOT MATCHED BY TARGET THEN 
INSERT (ParamName, ParamValueString, ParamValueInt, ParamDescription) 
VALUES (ParamName, ParamValueString, ParamValueInt, ParamDescription)
WHEN MATCHED AND EXISTS
(
    SELECT [Source].ParamName, [Source].ParamValueString, [Source].ParamValueInt, [Source].ParamDescription
    EXCEPT
    SELECT [Target].ParamName, [Target].ParamValueString, [Target].ParamValueInt, [Target].ParamDescription
) THEN
    UPDATE SET
        ParamValueString = [Source].ParamValueString,
        ParamValueInt = [Source].ParamValueInt,
        ParamDescription = [Source].ParamDescription
;

GO

--MERGE generated by 'sp_generate_merge' stored procedure
--Originally by Vyas (http://vyaskn.tripod.com/code): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008+ by Daniel Nolan (https://twitter.com/dnlnln)

SET NOCOUNT ON

SET IDENTITY_INSERT dbo.[ProductCategory] ON

DECLARE @mergeOutput901578250 TABLE ( [DMLAction] VARCHAR(6) );
MERGE INTO dbo.[ProductCategory] AS [Target]
USING (VALUES
  (1,N'Electronics')
, (2,N'Toys')
) AS [Source] ([Id],[Name])
ON ([Target].[Id] = [Source].[Id])
WHEN MATCHED AND (
	NULLIF([Source].[Name], [Target].[Name]) IS NOT NULL OR NULLIF([Target].[Name], [Source].[Name]) IS NOT NULL) THEN
 UPDATE SET
  [Target].[Name] = [Source].[Name]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([Id],[Name])
 VALUES([Source].[Id],[Source].[Name])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE
OUTPUT $action INTO @mergeOutput901578250;


DECLARE @mergeError901578250 int,
@mergeCount901578250 int,
@mergeCountIns901578250 int,
@mergeCountUpd901578250 int,
@mergeCountDel901578250 int
SELECT @mergeError901578250 = @@ERROR
SELECT @mergeCount901578250 = COUNT(1), @mergeCountIns901578250 = SUM(IIF([DMLAction] = 'INSERT', 1, 0)), @mergeCountUpd901578250 = SUM(IIF([DMLAction] = 'UPDATE', 1, 0)), @mergeCountDel901578250 = SUM (IIF([DMLAction] = 'DELETE', 1, 0)) FROM @mergeOutput901578250
IF @mergeError901578250 != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR dbo.[ProductCategory]. Rows affected: ' + CAST(@mergeCount901578250 AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT 'dbo.[ProductCategory] rows affected by MERGE: ' + CAST(COALESCE(@mergeCount901578250,0) AS VARCHAR(100)) + ' (Inserted: ' + CAST(COALESCE(@mergeCountIns901578250,0) AS VARCHAR(100)) + '; Updated: ' + CAST(COALESCE(@mergeCountUpd901578250,0) AS VARCHAR(100)) + '; Deleted: ' + CAST(COALESCE(@mergeCountDel901578250,0) AS VARCHAR(100)) + ')' ;
 END
GO



SET IDENTITY_INSERT dbo.[ProductCategory] OFF
SET NOCOUNT OFF
GO


--MERGE generated by 'sp_generate_merge' stored procedure
--Originally by Vyas (http://vyaskn.tripod.com/code): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008+ by Daniel Nolan (https://twitter.com/dnlnln)

SET NOCOUNT ON

SET IDENTITY_INSERT dbo.[ProductSubCategory] ON

DECLARE @mergeOutput965578478 TABLE ( [DMLAction] VARCHAR(6) );
MERGE INTO dbo.[ProductSubCategory] AS [Target]
USING (VALUES
  (1,1,N'Kitchenware')
, (2,1,N'Computers')
, (3,1,N'Televisions')
, (4,1,N'Mobile Devices')
, (5,2,N'Lego')
, (6,2,N'Action Figures')
, (7,2,N'Board Games')
) AS [Source] ([Id],[ParentCategoryId],[Name])
ON ([Target].[Id] = [Source].[Id])
WHEN MATCHED AND (
	NULLIF([Source].[ParentCategoryId], [Target].[ParentCategoryId]) IS NOT NULL OR NULLIF([Target].[ParentCategoryId], [Source].[ParentCategoryId]) IS NOT NULL OR 
	NULLIF([Source].[Name], [Target].[Name]) IS NOT NULL OR NULLIF([Target].[Name], [Source].[Name]) IS NOT NULL) THEN
 UPDATE SET
  [Target].[ParentCategoryId] = [Source].[ParentCategoryId], 
  [Target].[Name] = [Source].[Name]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([Id],[ParentCategoryId],[Name])
 VALUES([Source].[Id],[Source].[ParentCategoryId],[Source].[Name])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE
OUTPUT $action INTO @mergeOutput965578478;


DECLARE @mergeError965578478 int,
@mergeCount965578478 int,
@mergeCountIns965578478 int,
@mergeCountUpd965578478 int,
@mergeCountDel965578478 int
SELECT @mergeError965578478 = @@ERROR
SELECT @mergeCount965578478 = COUNT(1), @mergeCountIns965578478 = SUM(IIF([DMLAction] = 'INSERT', 1, 0)), @mergeCountUpd965578478 = SUM(IIF([DMLAction] = 'UPDATE', 1, 0)), @mergeCountDel965578478 = SUM (IIF([DMLAction] = 'DELETE', 1, 0)) FROM @mergeOutput965578478
IF @mergeError965578478 != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR dbo.[ProductSubCategory]. Rows affected: ' + CAST(@mergeCount965578478 AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT 'dbo.[ProductSubCategory] rows affected by MERGE: ' + CAST(COALESCE(@mergeCount965578478,0) AS VARCHAR(100)) + ' (Inserted: ' + CAST(COALESCE(@mergeCountIns965578478,0) AS VARCHAR(100)) + '; Updated: ' + CAST(COALESCE(@mergeCountUpd965578478,0) AS VARCHAR(100)) + '; Deleted: ' + CAST(COALESCE(@mergeCountDel965578478,0) AS VARCHAR(100)) + ')' ;
 END
GO



SET IDENTITY_INSERT dbo.[ProductSubCategory] OFF
SET NOCOUNT OFF

GO
PRINT N'Finished deploying DB Version ' + dbo.GetDBVersion()